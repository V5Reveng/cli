use log::{debug, trace};

const TABLE_SIZE: usize = u8::MAX as usize + 1;

pub trait CrcComputable: Copy {
	const TABLE: [Self; TABLE_SIZE];
	fn update_crc(&mut self, data: &[u8]) -> &mut Self;
}

impl CrcComputable for u16 {
	// polynomial: 0x1021
	// CRC-CCITT (XModem)
	const TABLE: [Self; TABLE_SIZE] = [
		0, 4129, 8258, 12387, 16516, 20645, 24774, 28903, 33032, 37161, 41290, 45419, 49548, 53677, 57806, 61935, 4657, 528, 12915, 8786, 21173, 17044, 29431, 25302, 37689, 33560, 45947, 41818, 54205, 50076, 62463, 58334, 9314, 13379, 1056, 5121, 25830,
		29895, 17572, 21637, 42346, 46411, 34088, 38153, 58862, 62927, 50604, 54669, 13907, 9842, 5649, 1584, 30423, 26358, 22165, 18100, 46939, 42874, 38681, 34616, 63455, 59390, 55197, 51132, 18628, 22757, 26758, 30887, 2112, 6241, 10242, 14371,
		51660, 55789, 59790, 63919, 35144, 39273, 43274, 47403, 23285, 19156, 31415, 27286, 6769, 2640, 14899, 10770, 56317, 52188, 64447, 60318, 39801, 35672, 47931, 43802, 27814, 31879, 19684, 23749, 11298, 15363, 3168, 7233, 60846, 64911, 52716,
		56781, 44330, 48395, 36200, 40265, 32407, 28342, 24277, 20212, 15891, 11826, 7761, 3696, 65439, 61374, 57309, 53244, 48923, 44858, 40793, 36728, 37256, 33193, 45514, 41451, 53516, 49453, 61774, 57711, 4224, 161, 12482, 8419, 20484, 16421, 28742,
		24679, 33721, 37784, 41979, 46042, 49981, 54044, 58239, 62302, 689, 4752, 8947, 13010, 16949, 21012, 25207, 29270, 46570, 42443, 38312, 34185, 62830, 58703, 54572, 50445, 13538, 9411, 5280, 1153, 29798, 25671, 21540, 17413, 42971, 47098, 34713,
		38840, 59231, 63358, 50973, 55100, 9939, 14066, 1681, 5808, 26199, 30326, 17941, 22068, 55628, 51565, 63758, 59695, 39368, 35305, 47498, 43435, 22596, 18533, 30726, 26663, 6336, 2273, 14466, 10403, 52093, 56156, 60223, 64286, 35833, 39896,
		43963, 48026, 19061, 23124, 27191, 31254, 2801, 6864, 10931, 14994, 64814, 60687, 56684, 52557, 48554, 44427, 40424, 36297, 31782, 27655, 23652, 19525, 15522, 11395, 7392, 3265, 61215, 65342, 53085, 57212, 44955, 49082, 36825, 40952, 28183,
		32310, 20053, 24180, 11923, 16050, 3793, 7920,
	];
	fn update_crc(&mut self, data: &[u8]) -> &mut Self {
		for byte in data {
			let i = (*self >> (Self::BITS - u8::BITS)) as u8 ^ byte;
			*self = (*self << u8::BITS) ^ Self::TABLE[i as usize];
		}
		self
	}
}

impl CrcComputable for u32 {
	// polynomial: 0x04c1_1db7
	// CRC-32 but with no XOROUT, REFIN, or REFOUT
	const TABLE: [Self; TABLE_SIZE] = [
		0, 79764919, 159529838, 222504665, 319059676, 398814059, 445009330, 507990021, 638119352, 583659535, 797628118, 726387553, 890018660, 835552979, 1015980042, 944750013, 1276238704, 1221641927, 1167319070, 1095957929, 1595256236, 1540665371,
		1452775106, 1381403509, 1780037320, 1859660671, 1671105958, 1733955601, 2031960084, 2111593891, 1889500026, 1952343757, 2552477408, 2632100695, 2443283854, 2506133561, 2334638140, 2414271883, 2191915858, 2254759653, 3190512472, 3135915759,
		3081330742, 3009969537, 2905550212, 2850959411, 2762807018, 2691435357, 3560074640, 3505614887, 3719321342, 3648080713, 3342211916, 3287746299, 3467911202, 3396681109, 4063920168, 4143685023, 4223187782, 4286162673, 3779000052, 3858754371,
		3904687514, 3967668269, 881225847, 809987520, 1023691545, 969234094, 662832811, 591600412, 771767749, 717299826, 311336399, 374308984, 453813921, 533576470, 25881363, 88864420, 134795389, 214552010, 2023205639, 2086057648, 1897238633,
		1976864222, 1804852699, 1867694188, 1645340341, 1724971778, 1587496639, 1516133128, 1461550545, 1406951526, 1302016099, 1230646740, 1142491917, 1087903418, 2896545431, 2825181984, 2770861561, 2716262478, 3215044683, 3143675388, 3055782693,
		3001194130, 2326604591, 2389456536, 2200899649, 2280525302, 2578013683, 2640855108, 2418763421, 2498394922, 3769900519, 3832873040, 3912640137, 3992402750, 4088425275, 4151408268, 4197601365, 4277358050, 3334271071, 3263032808, 3476998961,
		3422541446, 3585640067, 3514407732, 3694837229, 3640369242, 1762451694, 1842216281, 1619975040, 1682949687, 2047383090, 2127137669, 1938468188, 2001449195, 1325665622, 1271206113, 1183200824, 1111960463, 1543535498, 1489069629, 1434599652,
		1363369299, 622672798, 568075817, 748617968, 677256519, 907627842, 853037301, 1067152940, 995781531, 51762726, 131386257, 177728840, 240578815, 269590778, 349224269, 429104020, 491947555, 4046411278, 4126034873, 4172115296, 4234965207,
		3794477266, 3874110821, 3953728444, 4016571915, 3609705398, 3555108353, 3735388376, 3664026991, 3290680682, 3236090077, 3449943556, 3378572211, 3174993278, 3120533705, 3032266256, 2961025959, 2923101090, 2868635157, 2813903052, 2742672763,
		2604032198, 2683796849, 2461293480, 2524268063, 2284983834, 2364738477, 2175806836, 2238787779, 1569362073, 1498123566, 1409854455, 1355396672, 1317987909, 1246755826, 1192025387, 1137557660, 2072149281, 2135122070, 1912620623, 1992383480,
		1753615357, 1816598090, 1627664531, 1707420964, 295390185, 358241886, 404320391, 483945776, 43990325, 106832002, 186451547, 266083308, 932423249, 861060070, 1041341759, 986742920, 613929101, 542559546, 756411363, 701822548, 3316196985,
		3244833742, 3425377559, 3370778784, 3601682597, 3530312978, 3744426955, 3689838204, 3819031489, 3881883254, 3928223919, 4007849240, 4037393693, 4100235434, 4180117107, 4259748804, 2310601993, 2373574846, 2151335527, 2231098320, 2596047829,
		2659030626, 2470359227, 2550115596, 2947551409, 2876312838, 2788305887, 2733848168, 3165939309, 3094707162, 3040238851, 2985771188,
	];
	fn update_crc(&mut self, data: &[u8]) -> &mut Self {
		for byte in data {
			let i = (*self >> (Self::BITS - u8::BITS)) as u8 ^ byte;
			*self = (*self << u8::BITS) ^ Self::TABLE[i as usize];
		}
		self
	}
}
#[cfg(test)]
mod tests {
	use super::CrcComputable;
	#[test]
	fn crc_16() {
		assert_eq!(*0u16.update_crc(&[1, 2, 3, 4]), 0x0d03);
	}
	#[test]
	fn crc_32() {
		assert_eq!(*0u32.update_crc(&[1, 2, 3, 4]), 0xbe33eab6);
	}
}

use serialport::SerialPort;

pub struct CRCSerialPort {
	underlying: Box<dyn SerialPort>,
	tx_crc: u16,
	rx_crc: u16,
}

impl From<Box<dyn SerialPort>> for CRCSerialPort {
	fn from(underlying: Box<dyn SerialPort>) -> Self {
		Self { underlying, tx_crc: 0, rx_crc: 0 }
	}
}
impl CRCSerialPort {
	pub fn port(&self) -> &dyn SerialPort {
		&*self.underlying
	}
	pub fn begin_tx_crc(&mut self) {
		trace!("begin tx crc");
		self.tx_crc = 0;
	}
	pub fn begin_rx_crc(&mut self) {
		trace!("begin rx crc");
		self.rx_crc = 0;
	}
	pub fn end_rx_crc(&mut self) -> std::io::Result<bool> {
		let mut buf = [0u8; u16::BITS as usize / (u8::BITS as usize)];
		<Self as std::io::Read>::read_exact(self, &mut buf)?;
		debug!("end rx crc with checksum 0x{:02x}{:02x}", buf[0], buf[1]);
		Ok(self.rx_crc == 0)
	}
	pub fn end_tx_crc(&mut self) -> std::io::Result<()> {
		let checksum = self.tx_crc.to_be_bytes();
		debug!("end tx crc with checksum {:#04x}", self.tx_crc);
		<Self as std::io::Write>::write(self, &checksum)?;
		Ok(())
	}
}

impl std::io::Read for CRCSerialPort {
	fn read(&mut self, output: &mut [u8]) -> std::io::Result<usize> {
		let ret = self.underlying.read(output)?;
		trace!("updating rx crc with {} bytes: {:?}", output.len(), output);
		self.rx_crc.update_crc(output);
		Ok(ret)
	}
}

impl std::io::Write for CRCSerialPort {
	fn write(&mut self, slice: &[u8]) -> std::io::Result<usize> {
		trace!("updating tx crc with {} bytes: {:?}", slice.len(), slice);
		self.tx_crc.update_crc(slice);
		self.underlying.write(slice)
	}
	fn flush(&mut self) -> std::io::Result<()> {
		self.underlying.flush()
	}
}
